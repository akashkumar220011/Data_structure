For two strings s and t, we say "t divides s" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).

Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.

 

Example 1:

Input: str1 = "ABCABC", str2 = "ABC"
Output: "ABC"
Example 2:

Input: str1 = "ABABAB", str2 = "ABAB"
Output: "AB"
Example 3:

Input: str1 = "LEET", str2 = "CODE"
Output: ""
 

Constraints:

1 <= str1.length, str2.length <= 1000
str1 and str2 consist of English uppercase letters.




class Solution {
    // Helper function to find GCD of two numbers
    private int f_gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return f_gcd(b, a % b);
    }
    
    // Function to find GCD of two strings
    public String gcdOfStrings(String str1, String str2) {
        // Check if concatenated strings are equal in both orders
        if (!(str1 + str2).equals(str2 + str1)) {
            return "";  // If they aren't, return an empty string
        }
        
        // Find GCD of lengths of the two strings
        int gcdLength = f_gcd(str1.length(), str2.length());
        
        // Return the substring from 0 to gcdLength
        return str1.substring(0, gcdLength);
    }
}
